version: '2.1'
#a network called singlelocal_default will be created
#all containers will have the name as the hostname
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:5.0.1
    depends_on:
    - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      #29092 for internal communication, 9092 for external
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      #remove all messages after 1h, consumed or not
      KAFKA_LOG_RETENTION_HOURS: 1
  kafka-rest:
    image: confluentinc/cp-kafka-rest:5.0.1
    depends_on:
    - zookeeper
    - kafka
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest
      KAFKA_REST_BOOTSTRAP_SERVERS: "kafka:29092"
      KAFKA_REST_LISTENERS: "http://kafka-rest:8081"
    ports:
      - "8081:8081"
  ui:
    #Human friendly kafka visualizer https://github.com/Landoop/kafka-topics-ui
    image: landoop/kafka-topics-ui
    depends_on:
      - kafka-rest
      - zookeeper
      - kafka
    ports:
      - "8082:8000"
    environment:
      #it is a browser app, kafka-rest needs to be accessible, and avoid CORS
      KAFKA_REST_PROXY_URL: "http://kafka-rest:8081"
      PROXY: "true"
      PORT: 8000